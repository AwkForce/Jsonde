{"name":"Jsonde","tagline":"Profiler and reverse engineering tool for java","body":"jSonde\r\n============\r\n[![CI Status](https://travis-ci.org/bedrin/jsonde.svg?branch=master)](https://travis-ci.org/bedrin/jsonde)\r\n[![Coverage Status](https://coveralls.io/repos/bedrin/jsonde/badge.svg?branch=master)](https://coveralls.io/r/bedrin/jsonde?branch=master)\r\n[ ![Download](https://api.bintray.com/packages/bedrin/github/jsonde/images/download.svg) ](https://bintray.com/bedrin/github/jsonde/_latestVersion)\r\n\r\njSonde allows you to generate sequence diagrams directly from your application runtime! This gives you a lot of advantages:\r\n * Understand the code created by your colleagues/partners in a short time\r\n * Rapidly generate documentation for your partners or users.\r\n * Easily investigate what's happening in large Java applications\r\n * Excellent companion for a common debugger\r\n\r\n![Sequence Diagram](http://bedrin.github.io/jsonde/sequenceDiagram.png \"Sequence Diagram\")\r\n\r\nManual\r\n============\r\n# Overview\r\njSonde allows you to analyze existing Java applications.\r\n\r\nIt can generate sequence diagrams, measure performance (both cpu and memory) and build different reports, like jar dependencies and others.\r\n\r\njSonde doesn't require any specific knowledge for using it and supports various operation systems and Java environments.\r\n\r\njSonde consists of two main components:\r\n* An agent which is attached to java processes and collects information\r\n* A rich GUI for visualising the results collected by the agent\r\n \r\n# Attaching jSonde agent to java applications\r\nThere're two main ways to attach jSonde agent to java applications - you can either specify additional parameters to java command or you can attach the agent dynamically without even restarting your application.\r\n\r\n## Attaching agent dynamically\r\nThis is the simplest way to attach jSonde agent to your application\r\n\r\nSelect \"File\" \\ \"Attach to Sun JVM\" menu item, and you'll see the dialog like shown below:\r\n![Attach to JVM](http://bedrin.github.io/jsonde/attachToJvm.png \"Attach to JVM\")\r\n\r\nIn this dialog there's a list of all java applications running on your computer\r\n\r\nOther fields in this dialog will be explained in the other chapter of this manual\r\n\r\nPlease note, that this feature may be unavailable on some virtual machines. It was properly tested only on Sun JVM 1.6+\r\n\r\n## Attaching agent using command line parameters\r\n\r\nLet's assume that you execute your java application using following command\r\n\r\njava -jar app.jar\r\n\r\nIn order to execute this application with jSonde agent, you need to add new parameters like shown below:\r\n\r\njava -javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 -jar app.jar\r\n\r\nBy no means you can use jSonde to analyze not only J2SE applications. You can find a few examples of using jSonde with Tomcat, JBoss and other environments below.\r\n\r\n### Apache Tomcat\r\n#### Microsoft Windows\r\n\r\nFile: %TOMCAT_HOME%\\bin\\catalina.bat\r\n\r\nAdd the following line:\r\n\r\nset JAVA_OPTS=-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 %JAVA_OPTS%\r\n\r\nIf you use the windows service or system tray startup use the following parameters instead:\r\n\r\n-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001\r\n\r\n#### GNU/Linux & Mac OS X\r\n\r\nFile: $TOMCAT_HOME/bin/catalina.sh\r\n\r\nAdd the following line:\r\n\r\nJAVA_OPTS=\"-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 $JAVA_OPTS\"\r\n\r\n### JBoss\r\n#### Microsoft Windows\r\n\r\nFile: %JBOSS_HOME%\\bin\\run.bat\r\n\r\nAdd the following line:\r\n\r\nset JAVA_OPTS=-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 %JAVA_OPTS%\r\n\r\n#### GNU/Linux & Mac OS X\r\n\r\nFile: $JBOSS_HOME/bin/run.sh\r\n\r\nAdd the following line:\r\n\r\nJAVA_OPTS=\"-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 $JAVA_OPTS\"\r\n\r\n### Other Application Servers\r\nJust check your application server configuration for the place, where you should specify jvm parameters\r\n\r\nHint: this is the same place where you should specify memory options -Xms & -Xmx\r\n\r\n### Using jSonde with applets\r\nYou can analyze applets running inside a browser with Java Plugin installed.\r\n\r\nPlease add the following option in \"Java(TM) Plug-in Control Panel\", on the \"Advanced\" tab, in the field \"Java Runtime Parameters\":\r\n\r\n-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001\r\n\r\nOn Windows, \"Java(TM) Plug-in Control Panel\" is accessible from the Windows \"Control Panel\"\r\n\r\nImportant: If the browser is running, you must restart it after you have made the changes.\r\n\r\nYou can also analyze applets started with appletviewer command by passing -J-javaagent:<path-to-jSonde-folder>/lib/jsonde.agent-1.1.0.jar=60001 as a command line parameter.\r\n\r\n## Connecting to jSonde agent specified by command line parameters\r\nAfter you've added jSonde agent to java parameters and started your application, you'll se the following message in output:\r\n\r\njSonde agent started\r\n\r\nNow you need to start jSonde GUI and select \"File\" \\ \"New Project\" menu item\r\n\r\nAfter that you'll see a dialog like shown below. It's pretty similar to one, we've described in chapter \"Attaching agent dynamically\" above. Hence the meaning of the similar fields in these two dialogs is the same\r\n\r\n![New Project](http://bedrin.github.io/jsonde/newProjectDialog.png \"New Project\")\r\n\r\n|Project name|The name of your project. It will be used for creating jSonde project files|\r\n|Project files location|Specifies a folder for storing jSonde project files. Each project consists of several files with the same name but different extensions|\r\n|Agent host|The IP address of the computer where jSonde agent is running. Value \"127.0.0.1\" is fine if you're executing jSonde GUI and jSonde agent on the same computer|\r\n|Agent port|\tTCP port for communicating between jSonde agent and GUI|\r\n|Filters|Allows you to specify filters for analyze. See chapter below|\r\n\r\n## Filtering in jSonde\r\njSonde allows you to specify filters in order to analyze only specified list of classes\r\n\r\nIt will allow you to analyze only your own classes and also improves performance\r\n\r\nLet's assume that your classes are all located in package \"com.mycompany\"\r\n\r\nIn this case first of all we need to exclude all classes and after that include classes from \"com.mycompany\" package: Exclude \"*\"; Include \"com.mycompany.*\"\r\n\r\nNow click on \"Connect\" button as that's it - you're ready to start working with jSonde\r\n\r\n# Using jSonde to analyze applications\r\nYou can use main menu or accordion pane on the left for opening different views: sequence diagrams, reports, profiling and so on\r\n\r\n## Viewing sequence diagrams\r\nSelect \"Sequence Diagrams\" pane and you'll see a tree with classes of your applications. The leaves of this tree are \"root\" method calls discovered by jSonde agent.\r\n\r\n\"root\" method call is the first method invocation inside the specified classes scope (see section about filters above)\r\n\r\nIf you double click on the selected method, a new tab with sequence diagram will be opened in the workspace\r\n\r\nYou can use buttons in toolbar for tuning the diagram view; mouse drag is also supported for scrolling the diagram\r\n\r\n![Sequence Diagram](http://bedrin.github.io/jsonde/sequenceDiagram.png \"Sequence Diagram\")\r\n\r\n## Viewing reports\r\nSelect \"Reports\" pane in order to view the list of available reports. They're also accessible through main menu\r\n\r\n### Dependency report\r\nThis report allows you to browse the dependencies of code sources (.jar files for example) inside your project\r\n\r\nSometimes it can be very useful to find missing or redundant dependency\r\n\r\n![Dependency Report](http://bedrin.github.io/jsonde/dependencyReport.png \"Dependency Report\")\r\n\r\n### Top Code Sources by Execution Time report\r\nThis report shows the top code sources by execution time.\r\n\r\nIt allows you to find the most \"slow\" or rather most \"used\" method grouped by jar files\r\n![Top Code Sources](http://bedrin.github.io/jsonde/topCodeSources.png \"Top Code Sources\")\r\n\r\n### Top Methods throwing exception\r\nThis report shows you the top method throwing any exceptions\r\n\r\nIf a method throws an exception a lot of time, it could be a good idea to review it's interface\r\n![Top Method Throwing Exception](http://bedrin.github.io/jsonde/topExceptions.png \"Top Method Throwing Exception\")\r\n\r\n## jSonde Profiler\r\njSonde supports both cpu and memory profiling, and allows you to find most executed methods, most created objects and so on\r\n\r\nClick on \"Profiler\" in accordion panel on the left, and select appropriate profiling view\r\n\r\n### CPU Profiler\r\nCPU profiler shows you method invocation counters and total execution time of the methods\r\n\r\nFor convenient browsing, this data is shown as a tree\r\n![CPU Profiler](http://bedrin.github.io/jsonde/cpuProfiler.png \"CPU Profiler\")\r\n\r\n### Heap analyzer\r\nHeap analyzer allows you to browse the snapshot of java memory heap and analyze what objects are created most often, what objects consume the largest amount of memory and other values\r\n![Heap Analyzer](http://bedrin.github.io/jsonde/memoryHeap.png \"Heap Analyzer\")\r\n\r\nBuilding\r\n============\r\njSonde is built using JDK 1.5+ and Maven 3+ - just checkout the project and type `mvn install`\r\n","google":"UA-62027168-1","note":"Don't delete this file! It's used internally to help with page regeneration."}